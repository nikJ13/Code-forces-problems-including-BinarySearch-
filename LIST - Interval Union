******************QUESTION********************************
Given a two-dimensional integer list intervals representing unsorted inclusive intervals, return their union in sorted order.

Constraints

n â‰¤ 100,000 where n is the length of intervals
Example 1
Input
intervals = [
    [0, 5],
    [4, 6]
]
Output
[
    [0, 6]
]
Example 2
Input
intervals = [
    [1, 2],
    [3, 4]
]
Output
[
    [1, 2],
    [3, 4]
]
Example 3
Input
intervals = [
    [5, 6],
    [1, 2]
]
Output
[
    [1, 2],
    [5, 6]
]
**********************************************
class Solution:
    def solve(self, intervals):
        n = len(intervals)
        if n==0:
            return []
        elif n==1:
            return intervals
        intervals = sorted(intervals,key= lambda x:x[0])
        start = intervals[0]
        ans = []
        i = 0
        while i<n:
            if start[1]>=intervals[i][0]:
                if start[1]<=intervals[i][1]:
                    start[1] = intervals[i][1]
            else:
                ans.append([start[0],start[1]])
                start[0] = intervals[i][0]
                start[1] = intervals[i][1]
            i += 1
        ans.append([start[0],start[1]])
        return ans
