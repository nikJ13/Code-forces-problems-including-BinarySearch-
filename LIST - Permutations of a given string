******************QUESTION*******************************
Given a string S. The task is to print all permutations of a given string.

 

Example 1:

Input: ABC
Output:
ABC ACB BAC BCA CAB CBA
Explanation:
Given string ABC has permutations in 6 
forms as ABC, ACB, BAC, BCA, CAB and CBA .
Example 2:

Input: ABSG
Output:
ABGS ABSG AGBS AGSB ASBG ASGB BAGS 
BASG BGAS BGSA BSAG BSGA GABS GASB 
GBAS GBSA GSAB GSBA SABG SAGB SBAG 
SBGA SGAB SGBA
Explanation:
Given string ABSG has 24 permutations.
 

Your Task:  
You don't need to read input or print anything. Your task is to complete the function find_permutaion() which takes the string S as input parameter and returns a vector of string in lexicographical order.

 

Expected Time Complexity: O(n! * n)

Expected Space Complexity: O(n)

 

Constraints:
1 <= length of string <= 5
************************************************************
class Solution:
    def find_permutation(self, S):
        # Code here
        n = len(S)
        ans = set()
        visited = [0]*n
        def recurse(string1,visited):
            if len(string1)==n:
                ans.add(string1)
                return
            for i in range(n):
                if visited[i]==0:
                    visited[i] = 1
                    recurse(S[i]+string1,visited)
                    visited[i] = 0
        for j in range(n):
            visited[j] = 1
            recurse(S[j],visited)
            visited[j] = 0
        return sorted(list(ans))
