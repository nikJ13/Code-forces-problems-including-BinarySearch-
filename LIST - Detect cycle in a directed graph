********************QUESTION*************************
Given a Directed Graph with V vertices (Numbered from 0 to V-1) and E edges, check whether it contains any cycle or not.


Example 1:

Input:



Output: 1
Explanation: 3 -> 3 is a cycle

Example 2:

Input:


Output: 0
Explanation: no cycle in the graph

Your task:
You don’t need to read input or print anything. Your task is to complete the function isCyclic() which takes the integer V denoting the number of vertices and adjacency list as input parameters and returns a boolean value denoting if the given directed graph contains a cycle or not.


Expected Time Complexity: O(V + E)
Expected Auxiliary Space: O(V)


Constraints:
1 ≤ V, E ≤ 105
********************************************************
class Solution:
    
    #Function to detect cycle in a directed graph.
    def isCyclic(self, V, adj):
        # code here
        #print(adj)
        visited = [0 for _ in range(V)]
        stack = [0 for _ in range(V)]
        def recurse(node):
            visited[node] = 1
            stack[node] = 1
            for i in range(len(adj[node])):
                if visited[adj[node][i]]==0:
                    if recurse(adj[node][i]):
                        return True
                elif stack[adj[node][i]]==1:
                    return True
            stack[node] = 0
            return False
        
        for i in range(V):
            if visited[i]==0 and recurse(i)==1:
                return True
        return False
